#!/usr/bin/env ruby
require 'gli'
require 'splitter'

include GLI::App

program_desc 'Describe your application here'

version Splitter::VERSION

subcommand_option_handling :normal
arguments :strict

desc 'Splits media files using cuefiles'
arg_name '[mediafile.mp3]'
command :split do |c|
  c.desc 'The cue file used split the file'
  c.flag [:u, :using]

  c.desc 'Force overwrite existing output directories. Use with care.'
  c.switch [:f, :force]

  c.action do |global_options,options,args|
    mediafile = args[0]
    raise 'You must specify a valid file as the first argument to split' if mediafile.nil?
    
    cuefile = options[:using]

    splitter = Splitter::Splitter.new mediafile, cuefile
    begin 
      splitter.split_dry_run
    rescue Splitter::OutputFolderExists => ex
      unless options[:force]
        raise "The output folder #{output_folder} already exists. Use --force to override."
      else
        output_folder = ex.message
        puts "Output folder exists. Deleting because of force switch."
        FileUtils.rm_r output_folder
      end
    end

    print 'Splitting...'
    output_folder = splitter.split!
    puts "done!"

    puts "Calculating replaygain..."
    Splitter::ReplayGain.apply_album_gain output_folder

    puts "Files located in #{output_folder}"
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
